#!/usr/bin/env python3

import sys
sys.path.append('../lib')
from xor import xorenc
from crmath import hamming

import english
import base64

def solvexor(ct):
    '''
    If `ct` is single-byte XOR encrypted English text, find the
    best-looking key byte. 
    '''
    key = None
    best = 0
    for by in range(256):
        pt = bytes([x^by for x in ct])
        s = english.score(pt)
        if s > best:
            best = s
            key = by
    return bytes([key])


enc = open('6.txt', 'rb').read()
enc = base64.decodebytes(enc)

# 
# Order likely key sizes by the lowest hamming score
#
hammings = []
for keysize in range(2, 40):
    h = 0
    for i in range(4):
        h += hamming(enc[i*keysize:(i+1)*keysize], enc[(i+1)*keysize:(i+2)*keysize])
    hammings.append((h / keysize, keysize))

hammings = sorted(hammings)

#
# Solve keys of the guessed lengths and score the decrypted text
#
decs = []
for _, keysize in hammings[:5]:
    key = b''
    for blockidx in range(keysize):
        block = [enc[i] for i in range(blockidx, len(enc), keysize)]
        k = solvexor(block)
        key += k
    dec = bytes([x^key[i % keysize] for i,x in enumerate(enc)])
    decs.append((english.score(dec), dec))

print(sorted(decs)[-1][1].decode('ascii'))
