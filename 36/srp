#!/usr/bin/env python3 

import sys
sys.path.append('../lib')

from crmath import mt19937, modexp
from sha1 import hmacsha1

from Crypto.Hash import SHA256
import random
import time


N = 0xffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff
g = 2
k = 3
I = b'alice@example.com'
P = b'Wonderland'

# Server - storing password in db
salt = bytes(hex(mt19937(seed = int(time.time())).next()), 'ascii')[2:]
hash = SHA256.new()
hash.update(salt + P)
xH = hash.hexdigest()
x = int(xH, 16)
v = modexp(g, x, N) 

# server saves salt, v

#
# client wants to log in
#
a = random.randint(0, N-1)
A = modexp(g, a, N)
# send (A,I) to server

#
# server replies
#
b = random.randint(0, N-1)
B = k*v + modexp(g, b, N)
# send (salt,B) to client

#
# both compute this
#
hash = SHA256.new()
hash.update(bytes(hex(A) + hex(B), 'ascii'))
u = int(hash.hexdigest(), 16)

#
# client
#
hash = SHA256.new()
hash.update(salt + P)
xH = hash.hexdigest()
x = int(xH, 16)
S = modexp(B - k * modexp(g, x, N), a + u * x, N)
hash = SHA256.new()
hash.update(bytes(str(S), 'ascii'))
K = hash.digest()
msg = hmacsha1(K, salt)

#
# server
#
Sp = modexp(A * modexp(v, u, N), b, N)
hash = SHA256.new()
hash.update(bytes(str(Sp), 'ascii'))
K = hash.digest()

print(msg == hmacsha1(K, salt))
